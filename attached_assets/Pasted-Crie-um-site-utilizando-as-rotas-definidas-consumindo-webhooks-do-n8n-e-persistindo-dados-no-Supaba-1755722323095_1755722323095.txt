Crie um site utilizando as rotas definidas, consumindo webhooks do n8n e persistindo dados no Supabase. Siga rigorosamente as regras de estilo e credenciais a seguir, construa as quatro páginas com seus containers, conteúdos, textos, imagens ilustrativas, botões e lógicas explícitas. Não inclua efeitos hover, transições, animações ou contornos. Não use markdown, negrito, caracteres especiais de formatação ou emojis.

PÁGINAS
/dashboard
/novo-sinistro
/detalhe-do-sinistro
/relatorios

ESTILO GLOBAL DO SITE
Tema moderno, tipografia sem serifa, espaçamentos consistentes, grids de 12 colunas, containers com cantos levemente arredondados.
Estilo 1 da seção (padrão das páginas): fundo #060606; containers com degradê de baixo #1A1A1A para cima #141414; botões com degradê da esquerda #387EF3 para direita #2155DC; texto dos botões #FFFFFF; ícones de botões #FFFFFF; título #FFFFFF; subtítulo #AFAFAF; texto principal com degradê da esquerda #387EF3 para direita #2155DC; ícones com degradê da esquerda #387EF3 para direita #2155DC.
Estilo 2 da seção (áreas de relatório): fundo #f9f9f9; containers com degradê de baixo #e5e5e5 para cima #ededed; botões com degradê da esquerda #387EF3 para direita #2155DC; texto dos botões #060606; ícones #060606; título #060606; subtítulo #e5e5e5; texto principal com degradê da esquerda #387EF3 para direita #2155DC; ícones com degradê da esquerda #387EF3 para direita #2155DC.
Regras adicionais obrigatórias: não usar estilo hover em nada; não usar linha de contorno; não usar animações CSS; não aplicar transições; não criar efeitos de movimento, rotação ou escala; não modificar background ou background-image em estados de interação; não aplicar transform; não alterar cor de texto em interação; não mudar opacidade; não alterar cursor.

REGRAS DE CREDENCIAIS E WEBHOOK
Todas as credenciais, URLs e segredos devem ser lidas de variáveis de ambiente no arquivo .env e nunca hardcoded.
Definir no .env:
N8N\_BASE\_URL
WH\_SINISTRO\_LIST
WH\_SINISTRO\_CREATE
WH\_DOC\_UPLOAD
WH\_SINISTRO\_ENVIAR\_AVISO
WH\_SINISTRO\_UPDATE\_STATUS
WH\_PENDENCIA\_CREATE
WH\_SINISTRO\_CLOSE
WH\_RELATORIO\_GERAR\_MENSAL
SUPABASE\_URL
SUPABASE\_ANON\_KEY
As chamadas de webhook devem usar POST com JSON, cabeçalho Content-Type application/json, e tratar resposta síncrona com status HTTP e corpo JSON padronizado conforme descrito nos botões de cada página.
Em caso de falha de rede ou status não 2xx, exibir mensagem de erro amigável e não repetir a chamada automaticamente.

REGRAS DE BANCO DE DADOS
Ao criar tables e colunas, escrever os títulos em português pt-br.
Tabelas mínimas no Supabase:
sinistros
documentos
pendencias
andamentos
workflow\_logs
Os nomes de colunas e seus significados são definidos na seção Banco de Dados ao final deste prompt e devem ser respeitados por todo o frontend.

NAVEGAÇÃO GLOBAL
Header fixo com logo da corretora (ImagemLogo, imagem SVG simples monocromática com ícone de escudo) e menu com itens Dashboard, Novo Sinistro, Relatórios. Botão Sair não deve existir. Rodapé simples com texto pequeno “Gestão de Sinistros • 2025”.
Sem menus dropdown ou mega menus. Estados ativos do menu apenas por cor sólida do texto, sem hover.

PÁGINA: /dashboard
Objetivo: visão consolidada dos sinistros e atalhos de operação.
Layout e containers
Seção HeaderEstilo1 com título “Dashboard de Sinistros” e subtítulo “Acompanhe e gerencie o ciclo completo”.
Container CardKPIGrid com três cartões: KPI Tempo médio (dias), KPI % dentro do prazo, KPI Sinistros ativos. Cada CardKPI mostra título curto, valor grande e subtítulo do período selecionado.
Container FiltroPeriodo com campos Data início, Data fim, Busca texto, Status (seleção múltipla com opções aberto, enviado, em\_analise, aprovado, negado, concluido), Seguradora (texto livre). Ao alterar qualquer campo não dispara rede; apenas ao clicar no botão correspondente.
Container TabelaSinistros com colunas Número, Segurado, Placa, Seguradora, Status, Data de aviso, Prazo limite. Paginação simples com Próxima e Anterior, sem rolagem infinita. Linha clicável para abrir o detalhe.
Container AjudaCurta com texto curto “Use os filtros para atualizar a visão. Clique em um sinistro para operar o caso.”
Botões e ações
BtnDashboardAtualizarLista: ao clicar, desabilitar o botão, mostrar estado “Atualizando...”, fazer POST para \${N8N\_BASE\_URL}/\${WH\_SINISTRO\_LIST} com payload { data\_inicio, data\_fim, busca, status, seguradora, pagina, tamanho\_pagina }. Em sucesso 200, atualizar CardKPIGrid e TabelaSinistros com os dados retornados, reabilitar botão e exibir Toast “Lista atualizada”. Em erro, reabilitar botão e exibir Toast de erro com texto retornado pelo backend ou texto padrão “Falha ao obter lista”.
BtnDashboardNovoSinistro: navegar para /novo-sinistro sem chamada de rede.
BtnDashboardAbrirDetalhe: presente em cada linha da TabelaSinistros como ação implícita de clique na linha. Ao clicar, navegar para /detalhe-do-sinistro?id={sinistro\_id}.
Imagens e ícones
Ícones lineares simples nos CardKPI: relógio, escudo, lista. Ícones devem seguir o degradê de ícones do Estilo 1.

PÁGINA: /novo-sinistro
Objetivo: cadastrar um sinistro com dados mínimos para iniciar a gestão.
Layout e containers
Seção HeaderEstilo1 com título “Novo Sinistro” e subtítulo “Informe os dados essenciais para abertura”.
Container FormNovoSinistro com campos obrigatórios: Segurado nome (texto), Segurado e-mail (email), Segurado telefone (texto), Placa (texto), Seguradora nome (texto), Tipo de sinistro (seleção com colisao, roubo\_furto, alagamento, incendio, outros), Resumo (textarea opcional). Validações client-side: e-mail válido; placa com 7 ou 8 caracteres; nome com mínimo 3 caracteres; telefone não vazio; seguradora não vazia; tipo selecionado.
Container BannerInfoPrazo com texto “Prazo de referência de 30 dias corridos a partir da data de aviso”.
Container ToastFeedback para mensagens de sucesso/erro.
Botões e ações
BtnSinistroCriarSubmit: ao clicar, desabilitar e mostrar “Enviando...”, fazer POST para \${N8N\_BASE\_URL}/\${WH\_SINISTRO\_CREATE} com payload { segurado\_nome, segurado\_email, segurado\_telefone, placa, seguradora\_nome, tipo\_sinistro, resumo }. Em sucesso 200, ler { sinistro\_id, mensagem }, exibir Toast “Sinistro criado”, limpar o formulário e navegar para /detalhe-do-sinistro?id={sinistro\_id}. Em erro, reabilitar e exibir Toast com o erro.
BtnSinistroCancelar: ao clicar, limpar formulário e navegar para /dashboard sem chamadas de rede.
Imagens e ícones
ImagemTopoInformativa simples abstrata relacionada a automóvel.

PÁGINA: /detalhe-do-sinistro
Objetivo: operar o caso, anexar documentos, registrar pendências e atualizar status.
Layout e containers
Seção PainelSinistroHeader com: Título “Sinistro” e subtítulo com segurado\_nome; Bloco Dados-chave mostrando Protocolo (ou “—” se vazio), Seguradora, Placa, Tipo de sinistro, Status atual, Data de aviso, Prazo limite calculado; IndicadorSLA que mostra dias restantes até prazo\_limite.
Container AcoesSinistro com botões principais descritos abaixo.
Container ListaDocumentos com tabela de documentos anexados: Tipo, Nome do arquivo, Tipo MIME, Recebido em. Link de download não é necessário; apenas exibir metadados.
Container ListaPendencias com tabela: Descrição, Solicitada por, Status, Criada em, Resolvida em. Ação de marcar como resolvida ocorre via atualização de status no sinistro; não criar botão extra.
Container TimelineAndamentos com eventos em ordem cronológica: tipo\_evento e descricao com data/hora.
ModalUploadDocumento para envio de documento com campos Tipo de documento (seleção com bo, cnh, crlv, fotos\_danos, orcamento, outros), Arquivo em base64 (textarea ou input de arquivo convertido), Nome do arquivo, Tipo MIME.
Container SeletorStatus com lista restrita de status permitidos: aberto, enviado, em\_analise, aprovado, negado, concluido.
Botões e ações
BtnDetalheAdicionarDocumento: abre ModalUploadDocumento sem chamada de rede.
BtnDetalheEnviarDocumentoSubmit (no ModalUploadDocumento): ao clicar, validar presença de sinistro\_id, tipo\_documento e arquivo, desabilitar e mostrar “Anexando...”, fazer POST para \${N8N\_BASE\_URL}/\${WH\_DOC\_UPLOAD} com payload { sinistro\_id, tipo\_documento, arquivo\_base64, mime\_type, nome\_arquivo }. Em sucesso 200, fechar modal, atualizar ListaDocumentos e TimelineAndamentos com o item retornado e exibir Toast “Documento anexado”. Em erro, manter modal aberto, reabilitar e exibir Toast de erro.
BtnDetalheEnviarAviso: ao clicar, desabilitar e mostrar “Preparando...”, fazer POST para \${N8N\_BASE\_URL}/\${WH\_SINISTRO\_ENVIAR\_AVISO} com payload { sinistro\_id }. Em sucesso 200, atualizar PainelSinistroHeader com protocolo e status “enviado”, inserir evento em TimelineAndamentos e exibir Toast “Aviso enviado”. Em erro, reabilitar e exibir Toast.
BtnDetalheAtualizarStatus: ao clicar, ler valor selecionado em SeletorStatus, desabilitar e mostrar “Atualizando...”, fazer POST para \${N8N\_BASE\_URL}/\${WH\_SINISTRO\_UPDATE\_STATUS} com payload { sinistro\_id, novo\_status, motivo\_opcional }. Em sucesso 200, atualizar Status no header, adicionar evento em TimelineAndamentos e Toast “Status atualizado”. Em erro, reabilitar e Toast de erro.
BtnDetalheCriarPendencia: ao clicar, abrir pequeno formulário inline no container ListaPendencias com campos Descrição e Solicitada por (corretor ou seguradora). Ao confirmar, desabilitar e fazer POST para \${N8N\_BASE\_URL}/\${WH\_PENDENCIA\_CREATE} com payload { sinistro\_id, descricao, solicitada\_por }. Em sucesso 200, inserir pendência na lista e evento em TimelineAndamentos, exibir Toast “Pendência criada”. Em erro, reabilitar e Toast de erro.
BtnDetalheConcluir: ao clicar, confirmar em diálogo simples “Deseja concluir este sinistro?”, desabilitar e fazer POST para \${N8N\_BASE\_URL}/\${WH\_SINISTRO\_CLOSE} com payload { sinistro\_id }. Em sucesso 200, setar status “concluido”, adicionar evento “conclusao” na TimelineAndamentos e Toast “Sinistro concluído”. Em erro, reabilitar e Toast de erro.
Imagens e ícones
Ícones nos botões: clipe para anexar, avião de papel para enviar aviso, setas para status, bandeira para concluir. Ícones com degradê de ícones do Estilo 1.

PÁGINA: /relatorios
Objetivo: gerar KPIs operacionais por período.
Layout e containers
Seção HeaderEstilo2 com título “Relatórios” e subtítulo “Indicadores operacionais do período”.
Container FiltroPeriodoRelatorio em Estilo 2 com campos Data início e Data fim.
Container CardsKPIs em Estilo 2 com três cards: Tempo médio de liquidação, % dentro do prazo, Sinistros por status.
Container TabelaAgregados em Estilo 2 com colunas Seguradora, Abertos, Enviados, Em análise, Aprovados, Negados, Concluídos.
Container Observacao com texto “Os dados consideram apenas sinistros do período selecionado.”
Botões e ações
BtnRelatoriosGerarMensal: ao clicar, desabilitar e mostrar “Calculando...”, fazer POST para \${N8N\_BASE\_URL}/\${WH\_RELATORIO\_GERAR\_MENSAL} com payload { data\_inicio, data\_fim }. Em sucesso 200, atualizar CardsKPIs e TabelaAgregados e exibir Toast “Relatório atualizado”. Em erro, reabilitar e Toast de erro.
Imagens e ícones
Ícones simples nos cards: gráfico de linhas, calendário, check-list. Ícones com degradê de ícones do Estilo 2.

COMPORTAMENTOS TRANSVERSAIS
Estados de carregamento: todos os botões que disparam webhook devem ter estado desabilitado com rótulo de progresso enquanto aguardam resposta.
Mensagens: usar ToastFeedback para mensagens de sucesso e erro. Texto curto, objetivo.
Validação: validar client-side antes de chamar webhooks; se inválido, exibir mensagens próximas aos campos e não chamar o webhook.
Paginação de listas: TabelaSinistros deve solicitar página específica no webhook WH\_SINISTRO\_LIST via campos pagina e tamanho\_pagina.
Formatação: datas em formato dd/mm/aaaa; telefone como texto sem máscara; placas sem máscara.
Acessibilidade: contraste suficiente entre texto e fundos conforme paleta; foco visível sem usar outline CSS, usar realce por cor de borda interna do container.

MENSAGENS PADRÃO
Sucesso geral: “Operação realizada com sucesso.”
Erro geral: “Não foi possível completar a operação. Tente novamente.”
Validação faltando campo: “Preencha os campos obrigatórios.”
Documento inválido: “Arquivo inválido ou muito grande.”

MAPEAMENTO DOS WEBHOOKS E PAYLOADS
WH\_SINISTRO\_LIST request: { data\_inicio: string ISO, data\_fim: string ISO, busca: string, status: array de string, seguradora: string, pagina: number, tamanho\_pagina: number } response 200: { kpis: { tempo\_medio\_dias: number, dentro\_prazo\_percent: number, ativos: number }, lista: \[ { id: string, protocolo: string|null, segurado\_nome: string, placa: string, seguradora\_nome: string, status: string, data\_aviso: string ISO, prazo\_limite: string ISO } ], paginacao: { pagina: number, total\_paginas: number } }
WH\_SINISTRO\_CREATE request: { segurado\_nome: string, segurado\_email: string, segurado\_telefone: string, placa: string, seguradora\_nome: string, tipo\_sinistro: string, resumo: string|null } response 200: { sinistro\_id: string, mensagem: string }
WH\_DOC\_UPLOAD request: { sinistro\_id: string, tipo\_documento: string, arquivo\_base64: string, mime\_type: string, nome\_arquivo: string } response 200: { documento\_id: string, tipo\_documento: string, nome\_arquivo: string, mime\_type: string, recebido\_em: string ISO }
WH\_SINISTRO\_ENVIAR\_AVISO request: { sinistro\_id: string } response 200: { sinistro\_id: string, protocolo: string, status: string, resumo\_pacote: string }
WH\_SINISTRO\_UPDATE\_STATUS request: { sinistro\_id: string, novo\_status: string, motivo\_opcional: string|null } response 200: { sinistro\_id: string, status: string }
WH\_PENDENCIA\_CREATE request: { sinistro\_id: string, descricao: string, solicitada\_por: string } response 200: { pendencia\_id: string, descricao: string, solicitada\_por: string, status: string, criada\_em: string ISO }
WH\_SINISTRO\_CLOSE request: { sinistro\_id: string } response 200: { sinistro\_id: string, status: string }
WH\_RELATORIO\_GERAR\_MENSAL request: { data\_inicio: string ISO, data\_fim: string ISO } response 200: { kpis: { tempo\_medio\_dias: number, dentro\_prazo\_percent: number, total\_por\_status: { aberto: number, enviado: number, em\_analise: number, aprovado: number, negado: number, concluido: number } }, agregados: \[ { seguradora\_nome: string, aberto: number, enviado: number, em\_analise: number, aprovado: number, negado: number, concluido: number } ] }

BANCO DE DADOS NO SUPABASE
Tabela: sinistros
Colunas:
id (uuid, pk) identificador do sinistro
protocolo (text, opcional) código interno gerado quando enviado
segurado\_nome (text) identificação do segurado
segurado\_email (text) contato do segurado
segurado\_telefone (text) contato do segurado
placa (text) veículo do sinistro
seguradora\_nome (text) companhia associada
tipo\_sinistro (text) categoria operacional do caso
status (text) estado atual do fluxo
data\_aviso (timestamp) data e hora de abertura
prazo\_limite (date) data de referência para acompanhamento
resumo (text, opcional) observações do caso
criado\_em (timestamp) auditoria de criação
atualizado\_em (timestamp) auditoria de atualização
Finalidade: armazenar os casos de sinistro e seus atributos principais.

Tabela: documentos
Colunas:
id (uuid, pk) identificador do documento
sinistro\_id (uuid, fk sinistros.id) vínculo ao caso
tipo\_documento (text) classificação do anexo
nome\_arquivo (text) referência do arquivo
mime\_type (text) tipo do conteúdo
arquivo\_base64 (text) conteúdo codificado recebido via webhook
recebido\_em (timestamp) data e hora de recebimento
Finalidade: repositório simples dos anexos vinculados ao sinistro.

Tabela: pendencias
Colunas:
id (uuid, pk) identificador da pendência
sinistro\_id (uuid, fk sinistros.id) vínculo ao caso
descricao (text) texto da pendência
solicitada\_por (text) origem da solicitação
status (text) aberta ou resolvida
criada\_em (timestamp) data e hora de criação
resolvida\_em (timestamp, opcional) data e hora de resolução
Finalidade: controle de pendências operacionais por caso.

Tabela: andamentos
Colunas:
id (uuid, pk) identificador do evento
sinistro\_id (uuid, fk sinistros.id) vínculo ao caso
tipo\_evento (text) tipo do registro: abertura, documento\_recebido, aviso\_preparado, status\_atualizado, pendencia\_criada, conclusao
descricao (text, opcional) detalhes do evento
origem (text) sistema ou humano
criado\_em (timestamp) data e hora do evento
Finalidade: linha do tempo legível do caso para exibição no detalhe.

Tabela: workflow\_logs
Colunas:
id (uuid, pk) identificador do log
sinistro\_id (uuid, opcional, fk sinistros.id) caso relacionado se houver
workflow (text) nome do workflow no n8n
node (text) nome ou ordem do node
nivel (text) info, warn ou error
mensagem (text) resumo do fato
payload\_resumido (json) subconjunto seguro do payload para auditoria
criado\_em (timestamp) data e hora do log
Finalidade: auditoria técnica de execuções de webhooks e rastreabilidade mínima.

REQUISITOS DE LÓGICA E CONSISTÊNCIA
Cálculo de prazo\_limite sempre como data\_aviso + 30 dias corridos, exibindo apenas a data.
Transições de status permitidas: aberto → enviado → em\_analise → aprovado ou negado → concluido. Bloquear transições fora desta cadeia no frontend.
O campo protocolo só deve ser exibido quando preenchido pelo retorno de WH\_SINISTRO\_ENVIAR\_AVISO.
A TimelineAndamentos deve sempre refletir eventos gerados pelos webhooks e exibir o mais recente no topo.
Todas as páginas devem reutilizar os mesmos nomes de botões, containers e campos definidos neste prompt para manter consistência.
